function [ P_padded ] = pad15( P )
%pad - produces new matrix like P, except that the number of rows and 
%columns are both multiples of 15.
% Note that P is n x m x 3
% Rows and columns of 0 are added to the "end" of P, if needed.

% save original size of P
[rows, columns, colours] = size(P);

% determine the number of "extra" rows and columns in P
rm15 = mod(rows, 15);
cm15 = mod(columns, 15);

% Add 15-rm15 rows of zeros to each of the colour matrices
% The number of rows in each of P1, P2, P3 is now a multiple of 15
if rm15 > 0
P_pad(:,:,1) = padarray(P(:,:,1),[15-rm15,0],0,'post');
P_pad(:,:,2) = padarray(P(:,:,2),[15-rm15,0],0,'post');
P_pad(:,:,3) = padarray(P(:,:,3),[15-rm15,0],0,'post');
else
P_pad = P;
end

% Add 15-rm15 columns of zeros to the already enlarged matrices
% The number of columns in each of P1, P2, P3 is now a multiple of 15

if cm15 > 0
P_padded(:,:,1) = padarray(P_pad(:,:,1),[0,15-cm15],0,'post');
P_padded(:,:,2) = padarray(P_pad(:,:,2),[0,15-cm15],0,'post');
P_padded(:,:,3) = padarray(P_pad(:,:,3),[0,15-cm15],0,'post');
else
P_padded = P_pad;
end
end

function [ newB, num_zeros ] = process_block( B, tol )
% Applies compression algorithm to a 15x15 block of integers
%   and produces a new image matrix to a count of zeros in
%   the compressed coefficient matrix.
%
% Consumed values:
%   B is a 15x15 matrix
%   tol is a nonnegative number used in the compression of the
%     Fourier coefficients (only coefficients greater than tol are
%     maintained)
%
% Produced values:
%   newB is a 15x15 image matrix, resulting from applying ifft2 to our
%     compressed coefficient matrix (type uint8)
%   num_zeros is the number of coefficients that are 0 in the
%     compressed coefficient matrix (some of them may have been 0
%     originally)

% Apply a 2-d fft to the 15x15 block
F = fft2(B);

% Discard coefficients less than tol
F(F<tol)=0;

% Apply inverse operation to this "compressed" matrix
newB = uint8(real(ifft2(F)));
num_zeros = nnz(~newB);
end

function [ compressedP, compression_rate ] = compress_image( P, tol )
% Compresses an image setting small Fourier coefficients to 0
%
% Consumed values:
%   P is a n x m x 3 colour image matrix
%   tol is a nonnegative number used in the compression of the
%     Fourier coefficients (only coefficients greater than tol
%     are maintained)
%
% Produced values:
%   compressedP is the n x m x 3 colour image matrix, which is the same
%     size as P, but which is constructed from the Fourier 
%     coefficients of P
%   compression_rate is a number between 0 and 100, which gives the 
%     percentage of zero Fourier coefficients set to 0 (i.e. whose 
%     values were less than tol).
%     compression_rate is calculated as the total number of Fourier 
%     coefficients set to 0 in the compression process divided by the 
%     number of pixels in the padded image matrix of P.

% save the original size of P
[rows, columns, colours] = size(P);

% Pat matrix is assist with 15x15 block processing
paddedP = pad15(P);
padded_rows = size(paddedP)(1)-rows;
padded_columns = size(paddedP)(2)-columns;

% initialize compressedP into all uint8 zeros.
compressedP = zeros(rows + padded_rows, columns + padded_columns, 3, 'uint8');
num_zeros = 0;

% for each colour
for colour = 1:3
% Divide paddedP(:,:,colour) into 15x15 blocks, processing each in term,
%   and saving the result in compressedP
rows_of_15 = size(paddedP)(1)/15;
columns_of_15 = size(paddedP)(2)/15;
for r = 0:rows_of_15 - 1
  for c = 0:columns_of_15 - 1
    block = paddedP(15*r+1:15*r+15,15*c+1:15*c+15,colour);
    [modified, nz] = process_block( block, tol );
    num_zeros = num_zeros + nz;
    compressedP(15*r+1:15*r+15,15*c+1:15*c+15,colour) = modified;
  end
end
end

% Trim any extra rows and columns of P
compressedP = uint8(compressedP(1:rows,1:columns,1:3));
compression_rate = 100*num_zeros/numel(paddedP);
end

function [] = plotImages( image_file)
% plotImages plots the image in image_file with various levels 
%   of compression
%
% Consumed value:
% image_file is the name of a jpg/jpeg file in the current 
%   folder that will be displayed with approximately 50, 80, and 95% 
%   compression

orient landscape;

% Experimant with the values of tol50, tol80, tol95
%   to achieve compression rates close to 50%, 80%, and 95%

P = imread(image_file,'jpg');
subplot(2,2,1);
image(P);
title('Original Image');
axis off;

subplot(2,2,2);
tol50 = 3000;
[cP50, comp50] = compress_image(P, tol50);
image(cP50);
title(strcat('Compression Rate: ', num2str(comp50)));
axis off;

subplot(2,2,3);
tol80 = 35000;
[cP80, comp80] = compress_image(P, tol80);
image(cP80);
title(strcat('Compression Rate: ', num2str(comp80)));
axis off;

subplot(2,2,4);
tol95 = 50500;
[cP95, comp95] = compress_image(P, tol95);
image(cP95);
title(strcat('Compression Rate: ', num2str(comp95)));
axis off;
end